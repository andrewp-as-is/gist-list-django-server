1) что выводить на морде?
frontend/web
1. | http request |
2. | http response | 0/42
3. | processing | check yes/no
4. | `refresh matview` | check yes/no
---
{% if rate_limit.is_exceeded %}
<span class="flash flash-error">github secondary rate limit exceeded</span>
{% else %}
<a class="btn btn-sm" {% if sync.is_disabled or rate_limit.is_exceeded %}
с одной стороны такое не нужно показывать, с другой а как оправдать ожидания/тормоза?
но... что даст пользователю это сообщение?
github ratelimit просто или типа того?
--
/refresh
1) your refresh status
2) global
3) current vs recently completed
/refresh/history
4) refresh info - gists count, followers count, etc. requests count
5) refresh total requests count/report ?
6) refresh report (started_at, finished_at, http_requests_count
auth vs public
logged-in, etc
7) refresh/history
refresh/status
refresh/request
8) github_user_refresh.current
github_user_refresh.history
9) user_refresh
owner vs public (other user)
free vs pro тк разное
--
логичнее показывать только свой refresh
---
вопрос namespace/etc
actor_id
github_user_refresh.xxx vs user
---
modification можно выбирать из refresh_report distinct
---
user.refresh_lock вопрос только в column naming
---
viewer_id как вариант
---
user_id bigint
authenticated bool NOT NULL

UNIQUE(user_id,authenticated)
---
user_id bigint NOT NULL UNIQUE,
token_id int NOT NULL,
---
user_id bigint NOT NULL UNIQUE,
authenticated bool NOT NULL
---
как тогда определить user refresh count если нет token_id
---
user_id bigint NOT NULL UNIQUE,
authenticated bool NOT NULL
---
lock тогда по идее другое
это блокировка refresh self или другого,но другого для всех тк public
---
counter ?
lock для lock
counter только для подсчета :)
название неоднозначное ппц
---
modification в github.modification как вариант
---
counter тогда логичнее в user.refresh
github_user_refresh сомнительный namespace, user.xxx еще более )
2) где сбрасывать/удалять count после завершения?
разброс этого всего по namespace сомнительная затея тк нет изоляции
---
github.xxx тк там уже ratelimit, а временная таблица
github.user_refresh_lock (user_id,authenticated)
github.user_refresh_counter (user_id,viewer_id)
github.user_modification
github.user_refresh_report (history)
github.user404 (login,timestamp)
github.user_refresh_lock (user_id,authenticated)
---
github.user_refresh (user_id,timestamp)
github.user_refresh_time (user_id,timestamp)
user_refresh_time чуть более логично если все остальное подписано как github.user_refresh_xxx
---
github.user_refresh_report (history) зачем? если есть time
статистику duration смотреть?
ну правда нахрена знать историю если не для отладки как в случае command/etc
request_list еще логично
но под любой чих делать xxx_list это перебор КАРЛ
---

